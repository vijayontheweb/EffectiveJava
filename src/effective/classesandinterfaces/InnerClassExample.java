package effective.classesandinterfaces;

/**
 * Never put multiple top-level classes or interfaces in a single source file.
 * Following this rule guarantees that you can’t have multiple definitions for a
 * single class at compile time. This in turn guarantees that the class files
 * generated by compilation, and the behavior of the resulting program, are
 * independent of the order in which the source files are passed to the
 * compiler.
 * 
 * @author Vijay
 *
 */
public class InnerClassExample {

	public static void main(String[] args) {
		// Static Inner Class - Doesn't need enclosing class instance to be accessed		
		new StaticInnerClass().someMethod();
		// Non-Static Inner Class - Needs enclosing class instance to be accessed
		InnerClassExample example = new InnerClassExample();
		NonStaticInnerClass bean = example.new NonStaticInnerClass();
		bean.setA(1);
		bean.setB(2);
		System.out.println(bean.toString());
		// Method Local Non-Static Inner Class
		System.out.println(example.someMethod());
		// Here we are using Anonymous Inner class
		// that extends a class i.e. Here a Thread class
		Thread t1 = new Thread() {
			public void run() {
				System.out.println("Anonymous Inner class extends usage");
			}
		};
		t1.start();
		// Here we are using Anonymous Inner class
		// that implements a interface i.e. Here Runnable interface
		Runnable r = new Runnable() {
			public void run() {
				System.out.println("Anonymous Inner class implements usage");
			}
		};
		Thread t2 = new Thread(r);
		t2.start();
	}

	String someMethod() {
		final String name = "vijay";
		class MethodLocalNonStaticInnerClass {
			String getMethod() {
				return "MethodLocalNonStaticInnerClass Usage -> Hello" + name;
			}
		}
		return new MethodLocalNonStaticInnerClass().getMethod();
	}

	private static class StaticInnerClass {
		void someMethod(){
			System.out.println("StaticInnerClass usage");
		}
	}
		
	private class NonStaticInnerClass {
		int a;
		int b;

		public int getA() {
			return a;
		}

		public void setA(int a) {
			this.a = a;
		}

		public int getB() {
			return b;
		}

		public void setB(int b) {
			this.b = b;
		}

		public String toString() {
			return "Non-StaticInnerClass usage" + getA() + " " + getB();
		}

	}
}
